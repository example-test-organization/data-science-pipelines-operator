name: "Release Prep"
run-name: Prep Release
on:
  workflow_dispatch:
    inputs:
      previous_release_tag:
        default: 'v1.2.0'
        description: 'Previous Release tag'
        required: true
      target_release:
        default: '1.3'
        description: 'Target Minor Release (e.g. 1.2, 1.3, etc.)'
        required: true
      gh_org:
        default: 'example-test-organization'
        description: 'DSPO GitHub Org'
        required: true
      quay_org:
        type: string
        default: 'hukhan'
        description: 'Quay Organization to push builds.'
        required: true
env:
  GH_USER_EMAIL: 140449482+dsp-developers@users.noreply.github.com
  GH_USER_NAME: dsp-developers
  GH_TOKEN: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
  TARGET_RELEASE: ${{ inputs.target_release }}
  MINOR_RELEASE_WILDCARD: ${{ inputs.target_release }}.x
  MINOR_RELEASE_BRANCH: v${{ inputs.target_release }}.x
  MINOR_RELEASE_TAG: v${{ inputs.target_release }}.0
  QUAY_ORG: ${{ inputs.quay_org }}
  GH_ORG: ${{ inputs.gh_org }}
  DSPO_REPOSITORY: data-science-pipelines-operator
  DSPO_REPOSITORY_FULL: ${{ inputs.gh_org }}/data-science-pipelines-operator
  DSP_REPOSITORY: data-science-pipelines
  DSP_REPO_FULL: ${{ inputs.gh_org }}/data-science-pipelines-operator
  PREVIOUS_RELEASE_TAG: ${{ inputs.previous_release_tag }}

jobs:
  prereqs:
    runs-on: ubuntu-latest
    outputs:
      prereqs_successful: ${{ steps.vars.outputs.prereqs_successful }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}

      - name: compatibility doc
        id: vars
        env:
          GH_TOKEN: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
        run: |
          echo "Ensure compatibility.yaml is upto date, and generate a new compatibility.md. Use [release-tools] to accomplish this"

          BRANCH_NAME="compatibility-doc-generate-${{ env.TARGET_RELEASE }}"
          
          git config --global user.email "${{ env.GH_USER_EMAIL }}"
          git config --global user.name "${{ env.GH_USER_NAME }}"
          git remote add ${{ env.GH_USER_NAME }} https://${{ env.GH_USER_NAME }}:${{ secrets.DSP_DEVS_ACCESS_TOKEN }}@github.com/${{ env.GH_USER_NAME }}/${{ env.DSPO_REPOSITORY }}.git

          git checkout -B ${BRANCH_NAME}
          echo "Created branch: ${BRANCH_NAME}"

          echo "Checking if compatibility.yaml contains ${{ env.TARGET_RELEASE }} release...."
                   
          contains_rel=$(cat docs/release/compatibility.yaml | yq '[.[].dsp] | contains(["${{ env.MINOR_RELEASE_WILDCARD }}"])')
          
          if [[ "$contains_rel" == "false" ]]; then
          cat <<EOF >> /tmp/error.txt
          compatibility.yaml has NOT been updated with target release.

          Please add ${{ env.MINOR_RELEASE_WILDCARD }} dsp row in compatibility.yaml,
          
          then regenerate the compatibility.md by following the instructions here:
          https://github.com/opendatahub-io/data-science-pipelines-operator/tree/main/scripts/release#compatibility-doc-generation
          EOF
          
            echo ::error::$(cat /tmp/error.txt)
            exit 1
          fi
          echo "Confirmed existence of ${{ env.MINOR_RELEASE_BRANCH }} in compatibility.yaml."

          echo "Confirming that compatibility.md is upto date."
          python ./scripts/release/release.py version_doc --input_file docs/release/compatibility.yaml --out_file docs/release/compatibility.md
          
          echo -------
          git status
          git status --porcelain
          echo -------
          
          prereqs_successful=true
          if [[ `git status --porcelain` ]]; then
            echo "Compatibility.md is not up to date with Compatibility.yaml, creating pr to synchronize."
          
            
          
            git add .
            git commit -m "Update DSPO to $TARGET_RELEASE"
            git push ${{ env.GH_USER_NAME }} $BRANCH_NAME -f
            gh pr create \
              --repo https://github.com/${{ env.DSPO_REPOSITORY_FULL }} \
              --body "This is an automated PR to update Data Science Pipelines Operator version compatibility doc." \
              --title "Update DSP version compatibility doc." \
              --head "${{ env.GH_USER_NAME}}:$BRANCH_NAME" \
              --base "main"
            echo "PR to update compatibility doc has been created, please re-run this workflow once this PR is merged."
            prereqs_successful=false
          else
            echo "Compatibility.md doc is up to date with Compatibility.yaml, continuing with workflow..."
            echo "prereqs_successful=${prereqs_successful}" >> $GITHUB_OUTPUT
          fi
#
#  cut_branches:
#    runs-on: ubuntu-latest
#    needs: prereqs
#    if: ${{ needs.prereqs.outputs.prereqs_successful == true }}
#    steps:
#      - uses: actions/checkout@v3
#        name: checkout
#      - name: create branches
#        run: |
#          echo "Cut branch ${{ env.MINOR_RELEASE_BRANCH }} from main/master"
#          git checkout -B ${{ env.MINOR_RELEASE_BRANCH }}
#          git push origin ${{ env.MINOR_RELEASE_BRANCH }}
#          echo "Created DSPO ${{ env.MINOR_RELEASE_BRANCH }} branch"
#
#          DSP_DIR=$(dirname ${{ github.workspace }})/data-science-pipelines
#
#          git clone \
#            --depth=1 \
#            --branch=master \
#            https://${{ env.GH_USER_NAME}}:${{ secrets.DSP_DEVS_ACCESS_TOKEN }}@github.com/${{ env.DSP_REPOSITORY_FULL }} \
#            ${DSP_DIR}
#          cd ${DSP_DIR}
#
#          git checkout -B ${{ env.MINOR_RELEASE_BRANCH }}
#          git push origin ${{ env.MINOR_RELEASE_BRANCH }}
#          echo "Created DSP ${{ env.MINOR_RELEASE_BRANCH }} branch"
#
#  build_images:
#    runs-on: ubuntu-latest
#    needs: cut_branches
#    if: prereqs_successful == true
#    steps:
#      - uses: .github/workflows/build-tags.yml
#        with:
#          src_branch: ${{ env.MINOR_RELEASE_BRANCH }}
#          target_tag: ${{ env.MINOR_RELEASE_TAG }}
#          quay_org: ${{ env.QUAY_ORG }}
#          dsp_org_repo: ${{ env.DSPO_GH_ORG }}
#        secrets: inherit
#
#  generate_pr:
#    runs-on: ubuntu-latest
#    needs: build_images
#    steps:
#      - uses: actions/checkout@v3
#        name: checkout
#      - name: generate pr
#        env:
#          branch: release_${{ env.TARGET_RELEASE }}
#        # Note: The yaml in the body of the PR is used to feed inputs into the release workflow
#        # since there's no easy way to communicate information between the pr closing, and then triggering the
#        # release creation workflow.
#        # Therefore, take extra care when adding new code blocks in the PR body, or updating the existing one.
#        # Ensure any changes are compatible with the release_create workflow.
#        run: |
#          echo "Retrieve the sha images from the resulting workflow (check quay.io for the digests)."
#          echo "Using [release-tools] generate a `params.env` and submit a new pr to vx.y+1.**x** branch."
#          echo "For images pulled from registry, ensure latest images are upto date"
#
#          BRANCH_NAME="params-generate-${{ env.TARGET_RELEASE }}"
#          git remote add ${{ env.GH_USER_NAME }} https://${{ env.GH_USER_NAME }}:${{ secrets.DSP_DEVS_ACCESS_TOKEN }}@github.com/${{ env.GH_USER_NAME }}/${{ env.DSPO_REPOSITORY }}.git
#
#          git checkout -B ${BRANCH_NAME}
#          echo "Created branch: ${BRANCH_NAME}"
#
#          python release.py params --tag ${{ env.MINOR_RELEASE_TAG }} --out_file params.env \
#            --override="IMAGES_OAUTHPROXY=registry.redhat.io/openshift4/ose-oauth-proxy@sha256:ab112105ac37352a2a4916a39d6736f5db6ab4c29bad4467de8d613e80e9bb33"
#
#          git add .
#          git commit -m "Generate params for ${{ env.TARGET_RELEASE }}"
#          git push origin $BRANCH_NAME -f
#
#          # Used to feed inputs to release creation workflow.
#          # target_version is used as the GH TAG
#          cat <<"EOF" >> /tmp/body-file.txt
#          This is an automated PR to prep Data Science Pipelines Operator for release.
#          ```yaml
#          release_branch: ${{ env.MINOR_RELEASE_BRANCH }}
#          target_version_tag: ${{ env.MINOR_RELEASE_TAG }}
#          previous_release_tag: ${{ env.PREVIOUS_RELEASE_TAG }}
#          ```
#          EOF
#
#          gh pr create \
#            --repo https://github.com/${{ env.DSPO_REPOSITORY_FULL }} \
#            --body-file /tmp/body-file.txt  \
#            --title "Update DSP Operator manifests to $TARGET_TAG" \
#            --head "${{ env.GH_USER_NAME}}:$BRANCH_NAME" \
#            --label "release" \
#            --base "${{ env.MINOR_RELEASE_BRANCH }}"
