# Workflow Secrets required to be setup in repo:
# QUAY_ID
# QUAY_TOKEN
# DSP_DEVS_ACCESS_TOKEN
name: "Release Prep"
run-name: Prep Release
on:
  workflow_dispatch:
    inputs:
      previous_release_tag:
        default: 'v1.2.0'
        description: 'Previous Release tag'
        required: true
      target_release:
        default: '1.3'
        description: 'Target Minor Release (e.g. 1.2, 1.3, etc.)'
        required: true
      gh_org:
        default: 'example-test-organization'
        description: 'DSPO GitHub Org'
        required: true
      quay_org:
        type: string
        default: 'hukhan'
        description: 'Quay Organization to push builds.'
        required: true
      overwrite_imgs:
        default: 'true'
        description: 'Overwrite images in quay if they already exist for this release.'
        required: true
env:
  GH_USER_EMAIL: 140449482+dsp-developers@users.noreply.github.com
  GH_USER_NAME: dsp-developers
  TARGET_RELEASE: ${{ inputs.target_release }}
  MINOR_RELEASE_WILDCARD: ${{ inputs.target_release }}.x
  MINOR_RELEASE_BRANCH: v${{ inputs.target_release }}.x
  MINOR_RELEASE_TAG: v${{ inputs.target_release }}.0
  QUAY_ORG: ${{ inputs.quay_org }}
  GH_ORG: ${{ inputs.gh_org }}
  DSPO_REPOSITORY: data-science-pipelines-operator
  DSPO_REPOSITORY_FULL: ${{ inputs.gh_org }}/data-science-pipelines-operator
  DSP_REPOSITORY: data-science-pipelines
  DSP_REPOSITORY_FULL: ${{ inputs.gh_org }}/data-science-pipelines
  PREVIOUS_RELEASE_TAG: ${{ inputs.previous_release_tag }}
  OVERWRITE_IMAGES: ${{ inputs.overwrite_imgs }}
jobs:
  prereqs:
    name: Prerequisites
    runs-on: ubuntu-latest
    outputs:
      prereqs_successful: ${{ steps.vars.outputs.prereqs_successful }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}

      - name: compatibility doc
        id: vars
        env:
          GH_TOKEN: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
          GH_USER_NAME: ${{ env.GH_USER_NAME }}
          GH_USER_EMAIL: ${{ env.GH_USER_EMAIL }}
          TARGET_RELEASE: ${{ env.TARGET_RELEASE }}
          MINOR_RELEASE_WILDCARD: ${{ env.MINOR_RELEASE_WILDCARD }}
          MINOR_RELEASE_BRANCH: ${{ env.MINOR_RELEASE_BRANCH }}
          DSPO_REPOSITORY_FULL: ${{ env.DSPO_REPOSITORY_FULL }}
          DSPO_REPOSITORY: ${{ env.DSPO_REPOSITORY }}
        run: ./.github/scripts/release_prep/prereqs.sh

  cut_branches:
    name: Create Release Branches
    runs-on: ubuntu-latest
    needs: prereqs
    if: needs.prereqs.outputs.prereqs_successful == 'true'
    steps:
      - uses: actions/checkout@v3
        name: checkout
        with:
          token: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
          fetch-depth: 0
      - name: create branches
        env:
          GH_TOKEN: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
        run: |
          echo "Cut branch ${{ env.MINOR_RELEASE_BRANCH }} from main/master"

          echo "Current branches in ${{ env.DSPO_REPOSITORY_FULL }}"
          git branch -r

          git checkout -B ${{ env.MINOR_RELEASE_BRANCH }}
          git push origin ${{ env.MINOR_RELEASE_BRANCH }}
          echo "Created DSPO ${{ env.MINOR_RELEASE_BRANCH }} branch"

          echo "Current branches in ${{ env.DSP_REPOSITORY_FULL }}"
          DSP_DIR=$(dirname ${{ github.workspace }})/data-science-pipelines
          git clone \
            --depth=1 \
            --branch=master \
            https://${{ env.GH_USER_NAME}}:${{ secrets.DSP_DEVS_ACCESS_TOKEN }}@github.com/${{ env.DSP_REPOSITORY_FULL }} \
            ${DSP_DIR}
          cd ${DSP_DIR}
          git checkout -B ${{ env.MINOR_RELEASE_BRANCH }}
          git push origin ${{ env.MINOR_RELEASE_BRANCH }}
          echo "Created DSP ${{ env.MINOR_RELEASE_BRANCH }} branch"


  get-env-vars:
    name: Get Re-Usable Env Vars
    runs-on: ubuntu-latest
    outputs:
      MINOR_RELEASE_BRANCH: ${{ env.MINOR_RELEASE_BRANCH }}
      MINOR_RELEASE_TAG: ${{ env.MINOR_RELEASE_TAG }}
      QUAY_ORG: ${{ env.QUAY_ORG }}
      DSPO_GH_ORG: ${{ env.DSP_REPOSITORY_FULL }}
      OVERWRITE_IMAGES: ${{ env.OVERWRITE_IMAGES }}
    steps:
      - run: echo "Storing env vars for re-usable workflow."

  build_images:
    name: build-tags
    needs: [cut_branches, get-env-vars]
    if: needs.prereqs.outputs.prereqs_successful == 'true'
    uses: ./.github/workflows/build-tags.yml
    with:
      src_branch: ${{  needs.get-env-vars.outputs.MINOR_RELEASE_BRANCH }}
      target_tag: ${{  needs.get-env-vars.outputs.MINOR_RELEASE_TAG }}
      quay_org: ${{  needs.get-env-vars.outputs.QUAY_ORG }}
      dsp_org_repo: ${{  needs.get-env-vars.outputs.DSPO_GH_ORG }}
      overwrite_imgs: ${{  needs.get-env-vars.outputs.OVERWRITE_IMAGES }}
    secrets: inherit

  generate_pr:
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v3
        name: checkout
        with:
          token: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
      - name: generate pr
        env:
          branch: release_${{ env.TARGET_RELEASE }}
          GH_TOKEN: ${{ secrets.DSP_DEVS_ACCESS_TOKEN }}
        # Note: The yaml in the body of the PR is used to feed inputs into the release workflow
        # since there's no easy way to communicate information between the pr closing, and then triggering the
        # release creation workflow.
        # Therefore, take extra care when adding new code blocks in the PR body, or updating the existing one.
        # Ensure any changes are compatible with the release_create workflow.
        run: |
          echo "Retrieve the sha images from the resulting workflow (check quay.io for the digests)."
          echo "Using [release-tools] generate a params.env and submit a new pr to vx.y+1.**x** branch."
          echo "For images pulled from registry, ensure latest images are upto date"

          BRANCH_NAME="release-${{ env.TARGET_RELEASE }}"
          git config --global user.email "${{ env.GH_USER_EMAIL }}"
          git config --global user.name "${{ env.GH_USER_NAME }}"
          git remote add ${{ env.GH_USER_NAME }} https://${{ env.GH_USER_NAME }}:${{ secrets.DSP_DEVS_ACCESS_TOKEN }}@github.com/${{ env.GH_USER_NAME }}/${{ env.DSPO_REPOSITORY }}.git
          git checkout -B ${BRANCH_NAME}

          echo "Created branch: ${BRANCH_NAME}"

          python ./scripts/release/release.py params --quay_org ${{ env.QUAY_ORG }} --tag ${{ env.MINOR_RELEASE_TAG }} --out_file ./config/base/params.env \
            --override="IMAGES_OAUTHPROXY=registry.redhat.io/openshift4/ose-oauth-proxy@sha256:ab112105ac37352a2a4916a39d6736f5db6ab4c29bad4467de8d613e80e9bb33"

          git add .
          git commit -m "Generate params for ${{ env.TARGET_RELEASE }}"
          git push ${{ env.GH_USER_NAME }} $BRANCH_NAME -f

          # Used to feed inputs to release creation workflow.
          # target_version is used as the GH TAG
          cat <<"EOF" >> /tmp/body-file.txt
          This is an automated PR to prep Data Science Pipelines Operator for release.
          ```yaml
          odh_org: ${{ env.GH_ORG }}
          release_branch: ${{ env.MINOR_RELEASE_BRANCH }}
          target_version_tag: ${{ env.MINOR_RELEASE_TAG }}
          previous_release_tag: ${{ env.PREVIOUS_RELEASE_TAG }}
          ```
          EOF

          gh pr create \
            --repo https://github.com/${{ env.DSPO_REPOSITORY_FULL }} \
            --body-file /tmp/body-file.txt  \
            --title "Release ${{ env.MINOR_RELEASE_TAG }}" \
            --head "${{ env.GH_USER_NAME}}:$BRANCH_NAME" \
            --label "release-automation" \
            --base "${{ env.MINOR_RELEASE_BRANCH }}"
