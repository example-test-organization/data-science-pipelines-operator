name: "Release Create"
run-name: Create Release
on:
  pull_request:
    types:
      - closed
      - opened
      - reopened
    paths:
      - config/**
jobs:
  create_tag_release:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'release-automation') # && github.event.pull_request.merged == true
    outputs:
      TARGET_VERSION_TAG: ${{ steps.vars.outputs.target_version_tag }}
      PREVIOUS_VERSION_TAG: ${{ steps.vars.outputs.previous_version_tag }}
      RELEASE_BRANCH: ${{ steps.vars.outputs.release_branch }}
      ODH_ORG: ${{ steps.vars.outputs.odh_org }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: collect_vars
        id: vars
        run: |
          echo ${{github.event.pull_request.body}} > /tmp/body-file-raw.txt
          sed -n '/^```yaml/,/^```/ p' < data.yaml | sed '/^```/ d' > /tmp/config.yaml
          echo Parsed config from PR body:
          yq /tmp/config.yaml

          target_version_tag=$(yq .target_version_tag /tmp/config.yaml)
          previous_version_tag=$(yq .previous_release_tag /tmp/config.yaml)
          release_branch=$(yq .release_branch /tmp/config.yaml)
          odh_org=$(yq .odh_org /tmp/config.yaml)
          
          echo "target_version_tag=${target_version_tag}" >> $GITHUB_OUTPUT
          echo "previous_version_tag=${previous_version_tag}" >> $GITHUB_OUTPUT
          echo "release_branch=${release_branch}" >> $GITHUB_OUTPUT
          echo "odh_org=${odh_org}" >> $GITHUB_OUTPUT

      - name: Creates a release in GitHub
        run: |
          
          target_version_tag=${{ steps.vars.outputs.target_version_tag }}
          previous_version_tag=${{ steps.vars.outputs.previous_version_tag }}
          release_branch=${{ steps.vars.outputs.release_branch }}
          
          echo "Create a tag release for `x.y+1.z` in DSPO and DSP (e.g. `v1.3.0`)"
#          gh release create ${target_version_tag} --target ${release_branch} --generate-notes --notes-start-tag ${previous_version_tag}
#
#          cat <<"EOF" >> /tmp/release-notes.md
#          Any changes for the DSP component for ${target_version_tag} can
#          be found [here](https://github.com/opendatahub-io/data-science-pipelines/releases/tag/${target_version_tag}).
#          ```
#          EOF
#          echo "$(gh release view ${target_version_tag} --json body --jq .body)" >> /tmp/release-notes.md
#          gh release edit ${target_version_tag} --notes-file /tmp/release-notes.md
#          rm /tmp/release-notes.md
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        shell: bash

#  sync_manifests:
#    name: Sync ODH Manifests
#    uses: ./.github/workflows/odh-manifests-PR-sync.yml
#    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release-automation')
#    needs: create_tag_release
#    with:
#      src_branch: ${{  needs.create_tag_release.outputs.RELEASE_BRANCH }}
#      target_tag: ${{  needs.create_tag_release.outputs.TARGET_VERSION_TAG }}
#      odh_manifest_org: ${{  needs.create_tag_release.outputs.ODH_ORG }}